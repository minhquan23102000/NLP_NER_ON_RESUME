const { createDocument } = require('../test-utils');

describe('Menu', () => {
  describe('Link to contact form', () => {
    it('is rendered if contact form is valid', () => {
      const doc = createDocument({
        "meta": {
          "contactForm": {
            "header": "Smurf me a line",
            "action": "http://localsmurf",
            "fields": [
              {
                "name": "subject"
              }
            ]
          }
        }
      });
      const link = doc.querySelector('div[role=navigation] li:first-child a');
      expect(link.href).toContain("#contact");
    });

    it('is not rendered if contact form is missing', () => {
      const doc = createDocument();
      const link = doc.querySelector('div[role=navigation] li:first-child a');
      expect(link).toBeNull();
    });

    it('is not rendered if contact form has no fields', () => {
      const doc = createDocument({
        "meta": {
          "contactForm": {
            "action": "http://localhost",
            "header": "Custom Contact Form Header",
            "fields": []
          }
        }
      });
      const link = doc.querySelector('div[role=navigation] li:first-child a');
      expect(link).toBeNull();
    });

    it('is not rendered if contact form has no action', () => {
      const doc = createDocument({
        "meta": {
          "contactForm": {
            "header": "Custom Contact Form Header",
            "fields": [
              {
                "name": "subject"
              }
            ]
          }
        }
      });
      const link = doc.querySelector('div[role=navigation] li:first-child a');
      expect(link).toBeNull();
    });

    it('is not rendered if contact form custom header is set to false', () => {
      const doc = createDocument({
        "meta": {
          "contactForm": {
            "action": "http://localhost",
            "header": false,
            "fields": [
              {
                "name": "subject"
              }
            ]
          }
        }
      });
      const link = doc.querySelector('div[role=navigation] li:first-child a');
      expect(link).toBeNull();
    });
  });

  describe('Mailto link', () => {
    it('is not rendered if there is a contact form', () => {
      const doc = createDocument({
        "meta": {
          "contactForm": {
            "header": "Smurf me a line",
            "action": "http://localsmurf",
            "fields": [
              {
                "name": "subject"
              }
            ]
          }
        }
      });
      expect(doc.querySelector('div[role=navigation] li:first-child a').href).not.toContain('mailto:');
      expect(doc.querySelector('div[role=navigation] li:first-child a').href).toContain('#contact');
    });

    it('is not rendered if email is missing from resume basics', () => {
      const doc = createDocument();
      expect(doc.querySelector('div[role=navigation] li:first-child a')).toBeNull();
    });

    it('is rendered if email is present in resume basics', () => {
      const doc = createDocument({
        "basics": {
          "email": "gnap@gnap.gnap"
        }
      });
      expect(doc.querySelector('div[role=navigation] li:first-child a').href).toBe('mailto:gnap@gnap.gnap');
    });
  });

  test('Can render profiles links', () => {
    const doc = createDocument({
      "basics": {
        "profiles": [
          {
            "network": "SmurfHub",
            "url": "http://localhost/smurfhub/papasmurf"
          },
          {
            "network": "SmurfedIn",
            "url": "http://localhost/smurfedin/papasmurf"
          }
        ]
      }
    });

    const links = doc.querySelectorAll('div[role=navigation] a');
    expect(links.length).toBe(2);
    expect(links[0].title).toBe('SmurfHub');
    expect(links[0].href).toBe('http://localhost/smurfhub/papasmurf');
    expect(links[0].querySelector('i').className).toBe('fab fa-smurfhub')
    expect(links[1].title).toBe('SmurfedIn');
    expect(links[1].href).toBe('http://localhost/smurfedin/papasmurf');
    expect(links[1].querySelector('i').className).toBe('fab fa-smurfedin')
  });
});